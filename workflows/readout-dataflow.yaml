name: readout-dataflow
defaults:
  roc_ctp_emulator_enabled: "false"
  dd_enabled: "true"
  ddsched_enabled: "false"
  dcs_enabled: "false"
  qcdd_enabled: "false" # qcdd_enabled and minimal_dpl_enabled cannot be both true!
  minimal_dpl_enabled: "false"
  dpl_workflow: "none" # if specified, we use dpl_worfklow to choose what is between STFB and STFS. Otherwise, we fall to the old choice mechanism.
                       # available options: "none", "qc-daq", "minimal-dpl"
  stfb_standalone: "false"
  odc_enabled: "false"
  odcshim_enabled: "false"
  roc_cleanup_enabled: "false"
  fmq_cleanup_enabled: "true"
  monitoring_qc_url: "no-op://"
  monitoring_dd_url: "no-op://"
  monitoring_readout_url: "no-op://"
  detector: TST
  user: flp
roles:
  - name: host-{{ it }}
    for:
      range: "{{ hosts }}"
      var: it
    vars:
      readout_cfg_uri_standalone: "consul-ini://{{ consul_endpoint }}/o2/components/readout/ANY/any/readout-standalone-{{ it }}"
      readout_cfg_uri_stfb: "consul-ini://{{ consul_endpoint }}/o2/components/readout/ANY/any/readout-stfb-{{ it }}"
      dd_discovery_ib_hostname: "{{ it }}-ib" # MUST be defined for all stfb and stfs
    constraints:
      - attribute: machine_id
        value: "{{ it }}"
    roles:
      - name: "readout"
        vars:
          readout_cfg_uri: '{{dd_enabled == "true" ? readout_cfg_uri_stfb : readout_cfg_uri_standalone}}'
        task:
          load: readout
      - name: "data-distribution"
        enabled: "{{dd_enabled == 'true' && (qcdd_enabled == 'false' && minimal_dpl_enabled == 'false' && dpl_workflow == 'none')}}"
        roles:
          - name: "stfb-standalone"
            enabled: "{{stfb_standalone}}"
            connect:
              - name: readout
                type: pull
                target: "{{ Up(2).Path }}.readout:readout"
                rateLogging: "1"
            task:
              load: stfbuilder-nooutput
          - name: "stfb"
            enabled: "{{stfb_standalone == 'false'}}"
            vars:
              dd_discovery_stfb_id: stfb-{{ it }}-{{ NewID() }} # must be defined for all stfb roles
            connect:
              - name: readout
                type: pull
                target: "{{ Up(2).Path }}.readout:readout"
                rateLogging: "1"
            task:
              load: stfbuilder-senderoutput
          - name: "stfs"
            enabled: "{{stfb_standalone == 'false'}}"
            vars:
              dd_discovery_stfs_id: stfs-{{ it }}-{{ NewID() }} # must be defined for all stfs roles
              stfs_input_channel_name: buildertosender
            connect:
              - name: buildertosender
                type: pull
                target: "{{ Parent().Path }}.stfb:buildertosender"
                rateLogging: "1"
            task:
              load: stfsender
      - name: "data-distribution-dpl"
        enabled: "{{(qcdd_enabled == 'true' || minimal_dpl_enabled == 'true' || dpl_workflow != 'none') && dd_enabled == 'true'}}"
        roles:
          - name: "stfb"
            enabled: "{{stfb_standalone == 'false'}}"
            vars:
              dd_discovery_stfb_id: stfb-{{ it }}-{{ NewID() }}
            connect:
              - name: readout
                type: pull
                target: "{{ Up(2).Path }}.readout:readout"
                rateLogging: "10"
            task:
              #NOTE: plain stfbuilder TT (not stfbuilder-senderoutput) because we want dpl-chan
              load: stfbuilder
          - name: "stfs"
            enabled: "{{stfb_standalone == 'false' && (qcdd_enabled == 'true' || dpl_workflow == 'qc-daq')}}"
            vars:
              dd_discovery_stfs_id: stfs-{{ it }}-{{ NewID() }}
              stfs_input_channel_name: buildertosender
            connect:
              - name: buildertosender
                type: pull
                target: "{{ Parent().Path }}.qc-subwf.dpl-output-proxy:downstream"
                rateLogging: "10"
            task:
              load: stfsender
          - name: "stfs"
            enabled: "{{stfb_standalone == 'false' && (minimal_dpl_enabled == 'true' || dpl_workflow == 'minimal-dpl')}}"
            vars:
              dd_discovery_stfs_id: stfs-{{ it }}-{{ NewID() }}
              stfs_input_channel_name: downstream
            connect:
              - name: downstream
                type: pull
                target: "{{ Parent().Path }}.minimal-dpl-wf.dpl-output-proxy:downstream" # we need some automatic way to find out the wf+task name
                rateLogging: "10"
            task:
              load: stfsender
          - name: qc-subwf
            enabled: "{{ qcdd_enabled == 'true' || dpl_workflow == 'qc-daq' }}"
            defaults:
              dpl_config: "/etc/flp.d/qc/stfb-qc.dpl.json"
            vars:
              qc_config_uri: consul-json://{{ consul_endpoint }}/o2/components/qc/ANY/any/stfb_to_daqtask-{{ it }}
            roles:
              - name: "internal-dpl-clock"
                connect:
                task:
                  load: stfb-qc-internal-dpl-clock
              - name: "readout-proxy"
                connect:
                - name: from_internal-dpl-clock_to_readout-proxy
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.internal-dpl-clock:from_internal-dpl-clock_to_readout-proxy"
                  rateLogging: 0
                - name: readout-proxy
                  type: pull
                  transport: shmem
                  target: "{{ Up(2).Path }}.stfb:dpl-chan"
                  rateLogging: 1
                task:
                  load: stfb-qc-readout-proxy
              - name: "dpl-output-proxy"
                connect:
                - name: from_readout-proxy_to_dpl-output-proxy
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.readout-proxy:from_readout-proxy_to_dpl-output-proxy"
                  rateLogging: 0
                task:
                  load: stfb-qc-dpl-output-proxy
              - name: "Dispatcher"
                connect:
                - name: from_internal-dpl-clock_to_Dispatcher
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.internal-dpl-clock:from_internal-dpl-clock_to_Dispatcher"
                  rateLogging: 0
                - name: from_dpl-output-proxy_to_Dispatcher
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.dpl-output-proxy:from_dpl-output-proxy_to_Dispatcher"
                  rateLogging: 0
                task:
                  load: stfb-qc-Dispatcher
              - name: "QC-TASK-RUNNER-dataDistribution"
                connect:
                - name: from_internal-dpl-clock_to_QC-TASK-RUNNER-dataDistribution
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.internal-dpl-clock:from_internal-dpl-clock_to_QC-TASK-RUNNER-dataDistribution"
                  rateLogging: 0
                - name: from_Dispatcher_to_QC-TASK-RUNNER-dataDistribution
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.Dispatcher:from_Dispatcher_to_QC-TASK-RUNNER-dataDistribution"
                  rateLogging: 0
                task:
                  load: stfb-qc-QC-TASK-RUNNER-dataDistribution
              - name: "QC-CHECK-RUNNER-QcCheck"
                connect:
                - name: from_QC-TASK-RUNNER-dataDistribution_to_QC-CHECK-RUNNER-QcCheck
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.QC-TASK-RUNNER-dataDistribution:from_QC-TASK-RUNNER-dataDistribution_to_QC-CHECK-RUNNER-QcCheck"
                  rateLogging: 0
                task:
                  load: stfb-qc-QC-CHECK-RUNNER-QcCheck
              - name: "internal-dpl-global-binary-file-sink"
                connect:
                - name: from_QC-CHECK-RUNNER-QcCheck_to_internal-dpl-global-binary-file-sink
                  type: pull
                  transport: shmem
                  target: "{{ Parent().Path }}.QC-CHECK-RUNNER-QcCheck:from_QC-CHECK-RUNNER-QcCheck_to_internal-dpl-global-binary-file-sink"
                  rateLogging: 0
                task:
                  load: stfb-qc-internal-dpl-global-binary-file-sink
          - name: minimal-dpl-wf
            enabled: "{{  minimal_dpl_enabled == 'true' || dpl_workflow == 'minimal-dpl' }}"
            defaults:
              dpl_config: "/etc/flp.d/minimal-dpl/minimal-dpl.dpl.json"
            roles:
              - name: "internal-dpl-clock"
                connect:
                task:
                  load: minimal-dpl-internal-dpl-clock
              - name: "readout-proxy"
                connect:
                - name: "from_internal-dpl-clock_to_readout-proxy"
                  target: "{{Parent().Path}}.internal-dpl-clock:from_internal-dpl-clock_to_readout-proxy"
                  type: "pull"
                  rateLogging: "60"
                - name: "readout-proxy"
                  target: "{{ Up(2).Path }}.stfb:dpl-chan"
                  transport: shmem
                  type: "pull"
                  rateLogging: "10"
                task:
                  load: minimal-dpl-readout-proxy
              - name: "dpl-output-proxy"
                connect:
                - name: "from_readout-proxy_to_dpl-output-proxy"
                  target: "{{Parent().Path}}.readout-proxy:from_readout-proxy_to_dpl-output-proxy"
                  type: "pull"
                  rateLogging": "10"
                task:
                  load: minimal-dpl-dpl-output-proxy
      - name: roc-ctp-emulators
        enabled: "{{roc_ctp_emulator_enabled == 'true'}}"
        defaults:
          roc_ctp_emulator_endpoints: '["#0"]'
        roles:
          - name: "endpoint-{{ endpoint_id }}"
            for:
              range: "{{roc_ctp_emulator_endpoints}}"
              var: endpoint_id
            roles:
              - name: roc-ctp-emulator
                task:
                  load: "roc-ctp-emulator"
                  trigger: enter_RUNNING
                  timeout: 10s
                  critical: false
      - name: fairmq-shmmonitor
        enabled: "{{fmq_cleanup_enabled == 'true'}}"
        task:
          load: "fairmq-shmmonitor"
          trigger: DESTROY
          timeout: 10s
          critical: false
      - name: roc-cleanup
        enabled: "{{roc_cleanup_enabled == 'true'}}"
        task:
          load: "roc-cleanup"
          trigger: DESTROY
          timeout: 10s
          critical: false
      - name: ps-aux-on-destroy
        vars:
          shell_command: ps aux|grep OCCPlugin
        task:
          load: "shell-command"
          trigger: DESTROY
          timeout: 10s
          critical: false
  - name: odc-shim
    enabled: "{{odcshim_enabled == 'true'}}"
    task:
      load: odc-shim
  - name: dcs
    enabled: "{{dcs_enabled == 'true'}}"
    roles:
      - name: sor
        defaults:
          dcs_sor_parameters: "{\"key\":\"value\"}"
        call:
          func: dcs.StartOfRun()
          trigger: enter_RUNNING
          timeout: 5s
          critical: true
      - name: eor
        call:
          func: dcs.EndOfRun()
          trigger: leave_RUNNING
          timeout: 5s
          critical: true
  - name: dd-scheduler
    enabled: "{{ddsched_enabled == 'true'}}"
    roles:
      - name: initialize
        call:
          func: ddsched.PartitionInitialize()
          trigger: before_CONFIGURE
          timeout: 5s
          critical: true
      - name: terminate
        call:
          func: ddsched.PartitionTerminate()
          trigger: after_RESET
          timeout: 5s
          critical: true
      - name: cleanup
        call:
          func: ddsched.EnsureTermination()
          trigger: DESTROY
          timeout: 5s
          critical: false
  - name: odc
    enabled: "{{odc_enabled == 'true'}}"
    roles:
      - name: configure
        call:
          func: odc.Configure()
          trigger: before_CONFIGURE
          timeout: 30s
          critical: true
      - name: start
        call:
          func: odc.Start()
          trigger: before_START
          timeout: 5s
          critical: true
      - name: stop
        call:
          func: odc.Stop()
          trigger: after_STOP
          timeout: 5s
          critical: true
      - name: reset
        call:
          func: odc.Reset()
          trigger: after_RESET
          timeout: 15s
          critical: true
      - name: cleanup
        call:
          func: odc.EnsureCleanup()
          trigger: DESTROY
          timeout: 5s
          critical: false
