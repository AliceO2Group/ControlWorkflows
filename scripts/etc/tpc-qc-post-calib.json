{
  "qc": {
    "config": {
      "database": {
        "implementation": "CCDB",
        "host": "ali-qcdb.cern.ch:8083",
        "username": "not_applicable",
        "password": "not_applicable",
        "name": "not_applicable"
      },
      "Activity": {
        "number": "42",
        "type": "2"
      },
      "infologger": {
        "filterDiscardDebug": "true",
        "filterDiscardLevel": "1"
      },
      "monitoring": {
        "url": "infologger:///debug?qc"
      },
      "consul": {
        "url": "http://ali-consul.cern.ch:8500"
      },
      "conditionDB": {
        "url": "http://ccdb-test.cern.ch:8080"
      }
    },
    "postprocessing": {
      "PadCalibration": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::CalDetPublisher",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "outputCalPadMaps_comment": [
          "CalDet objects that are stored in std::unordered_map<std::string, o2::tpc::CalDet<float>> need to go here.",
          "This needs to be the last part of the CCDB path, e.g. Pulser or CE."
        ],
        "outputCalPadMaps": [                                                   
          "PedestalNoise"
        ],
        "outputCalPads_comment": [
          "CalDet objects that are stored as plain o2::tpc::CalDet<float> objects need to go here.",
          "This needs to be the last part of the CCDB path, e.g. Pedestal or Noise."
        ],
        "outputCalPads": [],
        "timestamps_comment": [
          "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
          "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
          "An empty array to get the the latest version will be the main use case.",
          "The array is mapped to the output objects sequentially",
          "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [],
        "lookupMetaData_comment": [
          "With this array you can filter your search via meta data.",
          "The array is mapped sequentially to the output objects.",
          "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
          "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
          "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
          "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {}
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "Pedestals" :   [ "240", "0",   "120" ] },
          { "Noise" :       [ "200", "0",   "2"   ] },
          { "Qtot" :  [ "600", "0",   "300" ] },
          { "T0" :    [ "100", "123", "125" ] },
          { "Width" : [ "100", "0",   "1"   ] },
          { "CEQtot" :      [ "600", "0",   "300" ] },
          { "CET0" :        [ "200", "400", "500" ] },
          { "CEWidth" :     [ "100", "0",   "1"   ] }
        ],
        "checkZSCalibration": {
          "check": "false",
          "initRefCalibTimestamp": "-1",
          "initRefPedestalTimestamp": "-1",
          "initRefNoiseTimestamp": "-1"
        },
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:ccdb:TPC/Calib/PedestalNoise"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "CE": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::CalDetPublisher",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "outputCalPadMaps_comment": [
          "CalDet objects that are stored in std::unordered_map<std::string, o2::tpc::CalDet<float>> need to go here.",
          "This needs to be the last part of the CCDB path, e.g. Pulser or CE."
        ],
        "outputCalPadMaps": [                                                   
          "CE"
        ],
        "outputCalPads_comment": [
          "CalDet objects that are stored as plain o2::tpc::CalDet<float> objects need to go here.",
          "This needs to be the last part of the CCDB path, e.g. Pedestal or Noise."
        ],
        "outputCalPads": [],
        "timestamps_comment": [
          "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
          "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
          "An empty array to get the the latest version will be the main use case.",
          "The array is mapped to the output objects sequentially",
          "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [],
        "lookupMetaData_comment": [
          "With this array you can filter your search via meta data.",
          "The array is mapped sequentially to the output objects.",
          "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
          "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
          "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
          "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {}
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "Pedestals" :   [ "240", "0",   "120" ] },
          { "Noise" :       [ "200", "0",   "2"   ] },
          { "Qtot" :  [ "300", "0",   "300" ] },
          { "T0" :    [ "200", "480", "520" ] },
          { "Width" : [ "100", "0",   "1"   ] },
          { "CEQtot" :      [ "600", "0",   "300" ] },
          { "CET0" :        [ "200", "400", "500" ] },
          { "CEWidth" :     [ "100", "0",   "1"   ] }
        ],
        "checkZSCalibration": {
          "check": "false",
          "initRefCalibTimestamp": "-1",
          "initRefPedestalTimestamp": "-1",
          "initRefNoiseTimestamp": "-1"
        },
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:ccdb:TPC/Calib/CE"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "Pulser": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::CalDetPublisher",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "outputCalPadMaps_comment" : [ "CalDet objects that are stored in std::unordered_map<std::string, o2::tpc::CalDet<float>> need to go here.",
                                       "This needs to be the last part of the CCDB path, e.g. Pulser or CE." ],
        "outputCalPadMaps": [
          "Pulser"
        ],
        "outputCalPads_comment" : [ "CalDet objects that are stored as plain o2::tpc::CalDet<float> objects need to go here.",
                                    "This needs to be the last part of the CCDB path, e.g. Pedestal or Noise." ],
        "outputCalPads": [
        ],
        "timestamps_comment": [ "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
                                "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
                                "An empty array to get the the latest version will be the main use case.",
                                "The array is mapped to the output objects sequentially",
                                "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [
        ],
        "lookupMetaData_comment": [ "With this array you can filter your search via meta data.",
                                    "The array is mapped sequentially to the output objects.",
                                    "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
                                    "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
                                    "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
                                    "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {
          }
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {
          }
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "Pedestals" :   [ "240", "0",   "120" ] },
          { "Noise" :       [ "200", "0",   "2"   ] },
          { "Qtot" :  [ "600", "0",   "300" ] },
          { "T0" :    [ "100", "123", "125" ] },
          { "Width" : [ "100", "0",   "1"   ] },
          { "CEQtot" :      [ "600", "0",   "300" ] },
          { "CET0" :        [ "200", "400", "500" ] },
          { "CEWidth" :     [ "100", "0",   "1"   ] }
        ],
        "checkZSCalibration": {
          "check": "false",
          "initRefCalibTimestamp": "-1",
          "initRefPedestalTimestamp": "-1",
          "initRefNoiseTimestamp": "-1"
        },
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:ccdb:TPC/Calib/Pulser"
        ],
        "stopTrigger_comment": [ "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
                                 "There will be a end of run trigger implemented so the above workaround can be abandoned later." ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "LaserCalibration": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::LaserTracks",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "timestamps_comment": [
          "Select specific timestamp, -1 is default."
        ],
        "timestamp": [],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData": [
          {}
        ],
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/LaserTracks'",
        "updateTrigger": [
          "newobject:ccdb:TPC/Calib/LaserTracks"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      
      "LaserCalibration_Trending": {
        "active": "true",
        "className": "o2::quality_control::postprocessing::TrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "dataSources": [
          {
            "type": "repository",
            "path": "qc/TPC/MO/LaserCalibration",
            "name": "Calib_Values",
            "reductorName": "o2::quality_control_modules::tpc::LtrCalibReductor",
            "moduleName": "QcTPC"
          }
        ],
        "plots": [
          {
            "name": "processedTFs_Trend",
            "title": "Trend of the number of processed TFs",
            "varexp": "Calib_Values.processedTFs:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "dvCorrectionA_Trend",
            "title": "Trend of the drift velocity correction factor (A side)",
            "varexp": "Calib_Values.dvCorrectionA:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "dvCorrectionC_Trend",
            "title": "Trend of the drift velocity correction factor (C side)",
            "varexp": "Calib_Values.dvCorrectionC:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "dvCorrection_Trend",
            "title": "Trend of the drift velocity correction factor",
            "varexp": "Calib_Values.dvCorrection:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "dvOffsetA_Trend",
            "title": "Trend of the drift velocity offset (A side)",
            "varexp": "Calib_Values.dvOffsetA:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "dvOffsetC_Trend",
            "title": "Trend of the drift velocity offset (C side)",
            "varexp": "Calib_Values.dvOffsetC:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "nTracksA_Trend",
            "title": "Trend of the number of tracks (A side)",
            "varexp": "Calib_Values.nTracksA:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "nTracksC_Trend",
            "title": "Trend of the number of tracks (C side)",
            "varexp": "Calib_Values.nTracksC:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "newobject:ccdb:qc/TPC/MO/LaserCalibration/Calib_Values"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      }  
    },
    "checks": {
      "PadCalibrationCheck2D": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::PadCalibrationCheck2D",
        "moduleName": "QcTPC",
        "policy": "OnEachSeparately",
        "detectorName": "TPC",
        "dataSource": [
          {
            "type": "PostProcessing",
            "name": "PadCalibration",
            "MOs": [
              "c_ROCs_Pedestal_2D"
            ]
          }
        ]
      }
    }
  }
}
