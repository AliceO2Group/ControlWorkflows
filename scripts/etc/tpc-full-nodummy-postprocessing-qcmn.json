{
  "qc": {
    "config": {
      "database": {
        "implementation": "CCDB",
        "host": "ali-qcdb.cern.ch:8083",
        "username": "not_applicable",
        "password": "not_applicable",
        "name": "not_applicable",
        "maxObjectSize": "10000000"
      },
      "Activity": {
        "number": "42",
        "type": "2"
      },
      "monitoring": {
        "url": "influxdb-unix:///tmp/telegraf.sock"
      },
      "consul": {
        "url": "http://ali-consul.cern.ch:8500"
      },
      "conditionDB": {
        "url": "ali-qcdb.cern.ch:8083",
        "host": "ali-qcdb.cern.ch:8083"
      }
    },
    "tasks": {
      "RawDigits": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::RawDigits",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "cycleDurationSeconds": "60",
        "resetAfterCycles": "1",
        "maxNumberCycles": "-1",
        "dataSource": {
          "type": "dataSamplingPolicy",
          "name": "random-rawdata",
          "query_blubb": "input:TPC/RAWDATA"
        },
        "taskParameters": {
          "NRawDigitsNBins": "100",
          "NRawDigitsXMin": "0",
          "NRawDigitsXMax": "100",
          "QmaxNBins": "200",
          "QmaxXMin": "0",
          "QmaxXMax": "200",
          "TimeBinNBins": "600",
          "TimeBinXMin": "0",
          "TimeBinXMax": "600",
          "mergeableOutput": "true"
        },
        "location": "local",
        "localMachines": [
          "localhost",
          "epn"
        ],
        "remotePort": "47731",
        "mergingMode": "delta",
        "remoteMachine": "alio2-cr1-qts01.cern.ch",
        "localControl": "odc"
      },
      "Clusters": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::Clusters",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "cycleDurationSeconds": "60",
        "resetAfterCycles": "1",
        "maxNumberCycles": "-1",
        "dataSource": {
          "type": "dataSamplingPolicy",
          "name": "random-cluster"
        },
        "taskParameters": {
          "myOwnKey": "myOwnValue",
          "NClustersNBins": "100",
          "NClustersXMin": "0",
          "NClustersXMax": "100",
          "QmaxNBins": "200",
          "QmaxXMin": "0",
          "QmaxXMax": "200",
          "QtotNBins": "600",
          "QtotXMin": "10",
          "QtotXMax": "600",
          "SigmaPadNBins": "200",
          "SigmaPadXMin": "0",
          "SigmaPadXMax": "2",
          "SigmaTimeNBins": "200",
          "SigmaTimeXMin": "0",
          "SigmaTimeXMax": "2",
          "TimeBinNBins": "1000",
          "TimeBinXMin": "0",
          "TimeBinXMax": "100000",
          "mergeableOutput": "true"
        },
        "location": "local",
        "localMachines": [
          "localhost",
          "epn"
        ],
        "remotePort": "47730",
        "remoteMachine": "alio2-cr1-qts01.cern.ch",
        "localControl": "odc"
      },
      "PID": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::PID",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "cycleDurationSeconds": "60",
        "resetAfterCycles": "10",
        "maxNumberCycles": "-1",
        "dataSource": {
          "type": "direct",
          "query": "inputTracks:TPC/TRACKS/0"
        },
        "taskParameters": {
          "cutMinNCluster": "60",
          "cutAbsTgl": "1.",
          "cutMindEdxTot": "10.",
          "cutMaxdEdxTot": "2000.",
          "cutMinpTPC": "0.05",
          "cutMaxpTPC": "20.",
          "cutMinpTPCMIPs": "0.45",
          "cutMaxpTPCMIPs": "0.55"
        },
        "location": "local",
        "localMachines": [
          "localhost",
          "epn"
        ],
        "remoteMachine": "alio2-cr1-qts01.cern.ch",
        "remotePort": "47732",
        "mergingMode": "delta",
        "localControl": "odc"
      },
      "Tracks": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::Tracks",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "cycleDurationSeconds": "60",
        "resetAfterCycles": "10",
        "maxNumberCycles": "-1",
        "dataSource": {
          "type": "direct",
          "query": "inputTracks:TPC/TRACKS/0"
        },
        "taskParameters": {
          "cutAbsEta": "1.",
          "cutMinNCluster": "60",
          "cutMindEdxTot": "0."
        },
        "location": "local",
        "localMachines": [
          "localhost",
          "epn"
        ],
        "remoteMachine": "alio2-cr1-qts01.cern.ch",
        "remotePort": "47733",
        "mergingMode": "delta",
        "localControl": "odc"
      }
    },
    "checks": {
      "CheckOfPID_Trending": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::CheckOfTrendings",
        "moduleName": "QcTPC",
        "policy": "OnEachSeparately",
        "detectorName": "TPC",
        "dataSource": [
          {
            "type": "PostProcessing",
            "name": "PID_Trending",
            "MOs": [
              "hNClsPID_StatMean_Trend",
              "hdEdxTotMIP_TPC_StatMean_Trend",
              "hdEdxTotMIP_TPC_StatStddev_Trend",
              "hdEdxVsncls_StatMean_Trend_dEdx",
              "hdEdxTotVsP_TPC_StatMean_Trend_p",
              "hdEdxVsPhi_StatMean_Trend_dEdx"
            ]
          }
        ],
        "checkParameters": {
            "chooseCheckMeanOrExpectedPhysicsValueOrBoth" : "Mean",
            "expectedPhysicsValue" : "0",
            "allowedNSigmaForExpectation" : "3",
            "badNSigmaForExpectation" : "6",
            "allowedNSigmaForMean" : "3",
            "badNSigmaForMean" : "6",
            "pointsToTakeForExpectedValueCheck" : "10",
            "pointsToTakeForMeanCheck" : "10"
          }
      },
      "CheckOfTrack_Trending": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::CheckOfTrendings",
        "moduleName": "QcTPC",
        "policy": "OnEachSeparately",
        "detectorName": "TPC",
        "dataSource": [
          {
            "type": "PostProcessing",
            "name": "Tracks_Trending",
            "MOs": [
              "hNClustersBeforeCuts_StatMean_Trend",
              "hNClustersAfterCuts_StatMean_Trend",
              "hEta_StatMean_Trend",
              "hPt_StatMean_Trend",
              "hSign_StatMean_Trend",
              "hPtNeg_StatMean_Trend",
              "hPtPos_StatMean_Trend",
              "h2DNClustersPhiAside_StatMean_Trend_Phi",
              "h2DNClustersPhiAside_StatMean_Trend_Nclusters",
              "h2DNClustersPhiCside_StatMean_Trend_Phi",
              "h2DNClustersPhiCside_StatMean_Trend_Nclusters"
            ]
          }
        ],
        "checkParameters": {
            "chooseCheckMeanOrExpectedPhysicsValueOrBoth" : "Mean",
            "expectedPhysicsValue" : "0",
            "allowedNSigmaForExpectation" : "3",
            "badNSigmaForExpectation" : "6",
            "allowedNSigmaForMean" : "3",
            "badNSigmaForMean" : "6",
            "pointsToTakeForExpectedValueCheck" : "10",
            "pointsToTakeForMeanCheck" : "10"
          }
      }
    },
    "postprocessing": {
      "RawDigits": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::ClusterVisualizer",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "timestamps_comment": [
          "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
          "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
          "An empty array to get the the latest version will be the main use case.",
          "The array is mapped to the output objects sequentially",
          "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [],
        "lookupMetaData_comment": [
          "With this array you can filter your search via meta data.",
          "The array is mapped sequentially to the output objects.",
          "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
          "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
          "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
          "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {}
        ],
        "histogramRanges_comment": [
          "nBins",
          "min",
          "max"
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "N_RawDigits" : [ "100",  "0", "10000"    ] },
          { "Q_Max" :       [ "200",  "0", "200"    ] },
          { "Time_Bin" :    [ "1000", "0", "100000" ] }
        ],
        "path_comment": "This is the path of the RawDigitData object that shall be visualized.",
        "path": "qc/TPC/MO/RawDigits/RawDigitData",
        "dataType_comment": "This is the switch for 'RawDigits' or 'Clusters' task. Choose 'raw' or 'clusters'.",
        "dataType": "raw",
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:qcdb:TPC/MO/RawDigits/RawDigitData"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "Clusters": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::ClusterVisualizer",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "timestamps_comment": [
          "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
          "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
          "An empty array to get the the latest version will be the main use case.",
          "The array is mapped to the output objects sequentially",
          "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [],
        "lookupMetaData_comment": [
          "With this array you can filter your search via meta data.",
          "The array is mapped sequentially to the output objects.",
          "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
          "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
          "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
          "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {}
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "N_Clusters" : [ "100",  "0", "100"    ] },
          { "Q_Max" :      [ "200",  "0", "200"    ] },
          { "Q_Tot" :      [ "600",  "0", "600"    ] },
          { "Sigma_Time" : [ "200",  "0", "2"      ] },
          { "Sigma_Pad" :  [ "200",  "0", "2"      ] },
          { "Time_Bin" :   [ "1000", "0", "100000" ] }
        ],
        "path_comment": "This is the path of the ClustersData object that shall be visualized.",
        "path": "qc/TPC/MO/Clusters/ClusterData",
        "dataType_comment": "This is the switch for 'RawDigits' or 'Clusters' task. Choose 'raw' or 'clusters'.",
        "dataType": "clusters",
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:qcdb:TPC/MO/Clusters/ClusterData"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "KrClusters": {
        "active": "true",
        "className": "o2::quality_control_modules::tpc::ClusterVisualizer",
        "moduleName": "QcTPC",
        "detectorName": "TPC",
        "timestamps_comment": [
          "Put the timestamp of the corresponding file you want to look for in the timestamps array.",
          "You can either put a timestamp for every object or leave the array empty to take the latest file from the CCDB.",
          "An empty array to get the the latest version will be the main use case.",
          "The array is mapped to the output objects sequentially",
          "If you want to pick the latest file in the CCDB manually, you can use -1."
        ],
        "timestamps": [],
        "lookupMetaData_comment": [
          "With this array you can filter your search via meta data.",
          "The array is mapped sequentially to the output objects.",
          "If you leave only one entry in the array this is used for all objects in outputCalPadMaps and outputCalPads.",
          "If you want no meta data simply remove 'keys' and 'values' completely and leave only {}",
          "Every entry above (outputCalPads.size() + outputCalPadMaps.size()) is ignored.",
          "The keys and values that are set by default are only there to serve as an example."
        ],
        "lookupMetaData": [
          {}
        ],
        "storeMetaData_comment": "For how-to, see 'lookupMetaData_comment'.",
        "storeMetaData": [
          {}
        ],
        "histogramRanges_comment" : [ "nBins", "min", "max" ],
        "histogramRanges": [
          { "N_Clusters" : [ "100",  "1", "101"    ] },
          { "Q_Max" :      [ "200",  "1", "1025"    ] },
          { "Q_Tot" :      [ "600",  "1", "6001"    ] },
          { "Sigma_Time" : [ "200",  "0", "2.5"      ] },
          { "Sigma_Pad" :  [ "200",  "0", "3.8"      ] },
          { "Time_Bin" :   [ "1001", "0", "100001" ] }
        ],
        "path_comment": "This is the path of the ClustersData object that shall be visualized.",
        "path": "qc/TPC/MO/KrClusters/ClusterData",
        "dataType_comment": "This is the switch for 'RawDigits' or 'Clusters' task. Choose 'raw' or 'clusters'.",
        "dataType": "clusters",
        "initTrigger": [
          "once"
        ],
        "updateTrigger_comment": "To trigger on a specific file being updated, use e.g. 'newobject:ccdb:TPC/Calib/Noise'",
        "updateTrigger": [
          "newobject:qcdb:TPC/MO/KrClusters/ClusterData"
        ],
        "stopTrigger_comment": [
          "To keep the task running until it is stopped manually set the trigger on the update of a non-existing object, e.g. 'newobject:ccdb:TPC/ThisDoesNotExist'",
          "There will be a end of run trigger implemented so the above workaround can be abandoned later."
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "PID_Trending": {
        "active": "true",
        "className": "o2::quality_control::postprocessing::TrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "dataSources": [
          {
            "type": "repository",
            "path": "TPC/MO/PID",
            "names": [
              "hNClsPID",
              "hdEdxTotMIP_TPC"
            ],
            "reductorName": "o2::quality_control_modules::common::TH1Reductor",
            "moduleName": "QcCommon"
          },
          {
            "type": "repository",
            "path": "TPC/MO/PID",
            "names": [
              "hdEdxVsncls",
              "hdEdxTotVsP_TPC",
              "hdEdxVsPhi"
            ],
            "reductorName": "o2::quality_control_modules::common::TH2Reductor",
            "moduleName": "QcCommon"
          }
        ],
        "plots": [
          {
            "name": "hNClsPID_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters",
            "varexp": "hNClsPID.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClsPID.stddev/(sqrt(hNClsPID.entries)))"
          },
          {
            "name": "hdEdxTotMIP_TPC_StatMean_Trend",
            "title": "Mean trend of dEdx for MIPS",
            "varexp": "hdEdxTotMIP_TPC.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hdEdxTotMIP_TPC.stddev/(sqrt(hdEdxTotMIP_TPC.entries)))"
          },
          {
            "name": "hdEdxTotMIP_TPC_StatStddev_Trend",
            "title": "Stddev trend of dEdx for MIPS",
            "varexp": "hdEdxTotMIP_TPC.stddev:time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsncls_StatMean_Trend_dEdx",
            "title": "Trend mean dEdx from dEdx vs Number of Clusters",
            "varexp": "(hdEdxVsncls.sumwy/hdEdxVsncls.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxTotVsP_TPC_StatMean_Trend_p",
            "title": "Trend mean p from dEdx vs Momentum",
            "varexp": "(hdEdxTotVsP_TPC.sumwx/hdEdxTotVsP_TPC.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "hdEdxVsPhi_StatMean_Trend_dEdx",
            "title": "Trend mean Phi from dEdx vs Phi",
            "varexp": "(hdEdxVsPhi.sumwx/hdEdxVsPhi.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "120 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      },
      "Tracks_Trending": {
        "active": "true",
        "className": "o2::quality_control::postprocessing::TrendingTask",
        "moduleName": "QualityControl",
        "detectorName": "TPC",
        "dataSources": [
          {
            "type": "repository",
            "path": "TPC/MO/Tracks",
            "names": [
              "hNClustersBeforeCuts",
              "hNClustersAfterCuts",
              "hEta",
              "hPt",
              "hSign",
              "hPtPos",
              "hPtNeg"
            ],
            "reductorName": "o2::quality_control_modules::common::TH1Reductor",
            "moduleName": "QcCommon"
          },
          {
            "type": "repository",
            "path": "TPC/MO/Tracks",
            "names": [
              "h2DNClustersPhiAside",
              "h2DNClustersPhiCside"
            ],
            "reductorName": "o2::quality_control_modules::common::TH2Reductor",
            "moduleName": "QcCommon"
          }
        ],
        "plots": [
          {
            "name": "hNClustersBeforeCuts_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters (Before the cuts)",
            "varexp": "hNClustersBeforeCuts.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClustersBeforeCuts.stddev)/(sqrt(hNClustersBeforeCuts.entries))"
          },
          {
            "name": "hNClustersAfterCuts_StatMean_Trend",
            "title": "Mean trend of the number of TPC clusters (After the cuts)",
            "varexp": "hNClustersAfterCuts.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hNClustersAfterCuts.stddev)/(sqrt(hNClustersAfterCuts.entries))"
          },
          {
            "name": "hEta_StatMean_Trend",
            "title": "Mean trend of the pseudorapidity",
            "varexp": "hEta.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hEta.stddev)/(sqrt(hEta.entries))"
          },
          {
            "name": "hPt_StatMean_Trend",
            "title": "Mean trend of the transverse momentum",
            "varexp": "hPt.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPt.stddev)/(sqrt(hPt.entries))"
          },
          {
            "name": "hSign_StatMean_Trend",
            "title": "Mean trend of the sign of electric charge",
            "varexp": "hSign.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hSign.stddev)/(sqrt(hSign.entries))"
          },
          {
            "name": "hPtNeg_StatMean_Trend",
            "title": "Mean trend of the transverse momentum of negative charges",
            "varexp": "hPtNeg.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPtNeg.stddev)/(sqrt(hPtNeg.entries))"
          },
          {
            "name": "hPtPos_StatMean_Trend",
            "title": "Mean trend of the transverse momentum of positive charges",
            "varexp": "hPtPos.mean:time",
            "selection": "",
            "option": "*L",
            "graphErrors": "0:(hPtPos.stddev)/(sqrt(hPtPos.entries))"
          },
          {
            "name": "h2DNClustersPhiAside_StatMean_Trend_Phi",
            "title": "Mean trend of Phi from h2DNClustersPhiAside",
            "varexp": "(h2DNClustersPhiAside.sumwx/h2DNClustersPhiAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiAside_StatMean_Trend_Nclusters",
            "title": "Mean trend of the number of clusters from h2DNClustersPhiAside",
            "varexp": "(h2DNClustersPhiAside.sumwy/h2DNClustersPhiAside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiCside_StatMean_Trend_Phi",
            "title": "Mean trend of Phi from h2DNClustersPhiCside",
            "varexp": "(h2DNClustersPhiCside.sumwx/h2DNClustersPhiCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          },
          {
            "name": "h2DNClustersPhiCside_StatMean_Trend_Nclusters",
            "title": "Mean trend of the number of clusters from h2DNClustersPhiCside",
            "varexp": "(h2DNClustersPhiCside.sumwy/h2DNClustersPhiCside.sumw):time",
            "selection": "",
            "option": "*L",
            "graphErrors": ""
          }
        ],
        "initTrigger": [
          "userorcontrol"
        ],
        "updateTrigger": [
          "120 seconds"
        ],
        "stopTrigger": [
          "userorcontrol"
        ]
      }
    }
  },
  "dataSamplingPolicies": [
    {
      "id": "random-cluster",
      "active": "true",
      "machines": [
        "localhost",
        "epn"
      ],
      "query": "inputClus:TPC/CLUSTERNATIVE",
      "outputs": "sampled-clusters:DS/CLUSTERNATIVE",
      "samplingConditions": [
        {
          "condition": "random",
          "fraction": "0.01",
          "seed": "0",
          "timesliceId": "tfCounter"
        }
      ],
      "blocking": "false"
    },
    {
      "id": "random-rawdata",
      "active": "true",
      "machines": [
        "localhost",
        "epn"
      ],
      "query": "inputRaw:TPC/RAWDATA",
      "outputs": "sampled-rawdata:DS/RAWDATA",
      "samplingConditions": [
        {
          "condition": "random",
          "fraction": "0.001",
          "seed": "0",
          "timesliceId": "tfCounter"
        }
      ],
      "blocking": "false"
    }
  ]
}












